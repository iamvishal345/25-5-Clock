{"version":3,"sources":["components/display-control/index.jsx","components/display/index.jsx","components/timer-control/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayControl","prefix","value","handleClick","className","id","title","onClick","Display","sessionLength","breakLength","isRunning","resetEvent","useState","timer","setTimer","isSessionRunning","setIsSessionRunning","interval","useRef","timeInSeconds","audioRef","setTimerFun","useCallback","minutes","seconds","clearInterval","current","console","log","setInterval","x","play","parseInt","useEffect","pause","currentTime","ref","preload","src","TimeControl","toggleTimer","resetTimer","App","setSessionLength","setBreakLength","setIsRunning","reset","setReset","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77ad62e2.chunk.js","sourcesContent":["export const DisplayControl = ({ prefix, value, handleClick }) => {\r\n  return (\r\n    <div className=\"display-control\">\r\n      <h3 className=\"caps\" id={`${prefix}-label`}>\r\n        {prefix} Length\r\n      </h3>\r\n      <div className=\"wrapper\">\r\n        <button\r\n          className=\"control-buttons\"\r\n          title={`Decrement ${prefix}`}\r\n          id={`${prefix}-decrement`}\r\n          onClick={handleClick}\r\n          value=\"dec\"\r\n        >\r\n          <p>&#x1F883;</p>\r\n        </button>\r\n        <label className=\"length\" id={`${prefix}-length`}>\r\n          {value}\r\n        </label>\r\n        <button\r\n          title={`Increment ${prefix}`}\r\n          className=\"control-buttons\"\r\n          id={`${prefix}-increment`}\r\n          onClick={handleClick}\r\n          value=\"inc\"\r\n        >\r\n          <p className=\"align\">&#x1F881;</p>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nexport const Display = ({\r\n  sessionLength,\r\n  breakLength,\r\n  isRunning,\r\n  resetEvent,\r\n}) => {\r\n  const [timer, setTimer] = useState(`${sessionLength}:00`);\r\n  const [isSessionRunning, setIsSessionRunning] = useState(true);\r\n\r\n  const interval = useRef(null);\r\n  const timeInSeconds = useRef(null);\r\n  const audioRef = useRef(null);\r\n\r\n  const setTimerFun = useCallback(() => {\r\n    let minutes, seconds;\r\n    clearInterval(interval.current);\r\n    console.log();\r\n    return setInterval(\r\n      (function x() {\r\n        if (timeInSeconds.current === -1) {\r\n          audioRef.current.play();\r\n          if (isSessionRunning) {\r\n            timeInSeconds.current = breakLength * 60;\r\n          } else {\r\n            timeInSeconds.current = sessionLength * 60;\r\n          }\r\n          setIsSessionRunning(!isSessionRunning);\r\n        }\r\n        minutes = parseInt(timeInSeconds.current / 60, 10);\r\n        seconds = parseInt(timeInSeconds.current % 60, 10);\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n        setTimer(`${minutes}:${seconds}`);\r\n        timeInSeconds.current -= 1;\r\n        return x;\r\n      })(),\r\n      1000\r\n    );\r\n  }, [breakLength, sessionLength, isSessionRunning]);\r\n\r\n  useEffect(() => {\r\n    clearInterval(interval.current);\r\n    audioRef.current.pause();\r\n    audioRef.current.currentTime = 0;\r\n    setTimer(`${sessionLength}:00`);\r\n    timeInSeconds.current = sessionLength * 60;\r\n    setIsSessionRunning(true);\r\n  }, [resetEvent, sessionLength]);\r\n\r\n  useEffect(() => {\r\n    interval.current = setTimerFun();\r\n  }, [setTimerFun]);\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      interval.current = setTimerFun();\r\n    } else {\r\n      clearInterval(interval.current);\r\n    }\r\n  }, [isRunning, setTimerFun]);\r\n  return (\r\n    <div className=\"timer-wrapper\">\r\n      <div className=\"timer-label\" id=\"timer-label\">\r\n        {isSessionRunning ? \"Session\" : \"Break\"}\r\n      </div>\r\n      <div className=\"time-left\" id=\"time-left\">\r\n        {timer}\r\n      </div>\r\n      <audio\r\n        ref={(ref) => (audioRef.current = ref)}\r\n        id=\"beep\"\r\n        preload=\"auto\"\r\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n","export const TimeControl = ({ toggleTimer, resetTimer }) => {\r\n  return (\r\n    <div className=\"time-control-wrapper\">\r\n      <button title=\"Play/Pause Timer\" id=\"start_stop\" onClick={toggleTimer}>\r\n        &#x25ba;&#x2225;\r\n      </button>\r\n      <button title=\"Reset Timer\" id=\"reset\" onClick={resetTimer}>\r\n        &#x21bb;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { useCallback, useState } from \"react\";\nimport \"./App.scss\";\nimport { DisplayControl } from \"./components/display-control\";\nimport { Display } from \"./components/display\";\nimport { TimeControl } from \"./components/timer-control\";\n\nfunction App() {\n  const [sessionLength, setSessionLength] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [isRunning, setIsRunning] = useState(false);\n  const [reset, setReset] = useState(false);\n\n  const handleClick = useCallback(\n    (e) => {\n      if (isRunning) return;\n      const id = e.target.id;\n      switch (id) {\n        case \"break-decrement\":\n          breakLength > 1 && setBreakLength(breakLength - 1);\n          break;\n        case \"break-increment\":\n          breakLength < 60 && setBreakLength(breakLength + 1);\n          break;\n        case \"session-decrement\":\n          sessionLength > 1 && setSessionLength(sessionLength - 1);\n          break;\n        case \"session-increment\":\n          sessionLength < 60 && setSessionLength(sessionLength + 1);\n          break;\n        default:\n          break;\n      }\n    },\n    [breakLength, sessionLength, isRunning]\n  );\n  const handleResetTimer = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setReset(!reset);\n    setIsRunning(false);\n  };\n  const handleToggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">25 + 5 Clock</header>\n      <section>\n        <DisplayControl\n          prefix=\"break\"\n          value={breakLength}\n          handleClick={handleClick}\n        />\n        <DisplayControl\n          prefix=\"session\"\n          value={sessionLength}\n          handleClick={handleClick}\n        />\n      </section>\n      <Display\n        sessionLength={sessionLength}\n        breakLength={breakLength}\n        isRunning={isRunning}\n        resetEvent={reset}\n      />\n      <TimeControl\n        resetTimer={handleResetTimer}\n        toggleTimer={handleToggleTimer}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}